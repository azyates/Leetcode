/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        
        //initialize values
        ListNode* current1 = l1;
        ListNode* current2 = l2;
        
        ListNode* cur = nullptr;
        // check for nullptr inputs
        if(l1==nullptr)
        {
            if(l2 !=nullptr)
            {
                cur = current2;
                current2 = current2->next;
            }
        }
        else if(l2 == nullptr)
        {
            cur = current1;
            current1 = current1->next;
        }
        else if(current1->val > current2->val)
        {
            cur = current2;
            current2 = current2->next;
        }
        else
        {
            cur = current1;
            current1 = current1->next;
        }
        
        ListNode* head = cur;
        
        //merge lists until one is empty in ascending order
        while(current1!=nullptr && current2!=nullptr)
        {
            if(current1->val >current2->val)
            {
                cur->next = current2;
                current2= current2->next;
                
            }
            else
            {
                cur->next = current1;
                current1 = current1->next;
            }
            
            cur = cur->next;
        }
        
        //add on the remaining list of the non empty one
        if(current1!=nullptr)
        {
            cur->next = current1;
        }
        else if(current2!=nullptr)
        {
            cur->next = current2;
        }
        
        return head;
    }
};
